package it.luca.disp.streaming.core.operation

import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.spark.sql.DataFrame

/**
 * Base class for reporting an operation on a [[ConsumerRecord]]
 * @param record instance of [[ConsumerRecord]]
 */

sealed abstract class RecordOperation(val record: ConsumerRecord[String, String])

/**
 * Class representing a failed operation on a [[ConsumerRecord]]
 * @param record instance of [[ConsumerRecord]]
 * @param throwable [[Throwable]] generated by failed operation
 */

case class FailedRecordOperation(override val record: ConsumerRecord[String, String],
                                 throwable: Throwable)
  extends RecordOperation(record)

/**
 * Class representing a successful conversion of a [[ConsumerRecord]] to a [[DataFrame]]
 * @param record instance of [[ConsumerRecord]]
 * @param dataFrame [[DataFrame]] obtained from record's conversion
 */

case class SuccessfulConversion(override val record: ConsumerRecord[String, String],
                                dataFrame: DataFrame)
  extends RecordOperation(record)
